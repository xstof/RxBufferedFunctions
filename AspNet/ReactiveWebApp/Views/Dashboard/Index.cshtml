@{
    ViewData["Title"] = "Index";
}
<html>
    <head>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.7/signalr.min.js"></script>
        <script src="https://unpkg.com/rxjs@@^7/dist/bundles/rxjs.umd.min.js"></script>
        @* <script data-main="resources/js/main" src="require.js"></script> *@
    </head>
    <body>
        <h2>Dashboard</h2>

        <div width="100%" height="100%" padding="50">
            <canvas id="myChart" ></canvas>
        </div>

        <!-- script to connect through signalr -->

        <script>
            "use strict";

            var connection = new signalR.HubConnectionBuilder().withUrl("/signalrhub").build();
            const subject = new rxjs.Subject();

            connection.on("updateViewerCount", function (message) {
                //console.log(JSON.stringify(message));
                console.log(`==> channel ${message.channel} has now ${message.viewerCount} viewers`);
                subject.next(message);
            });

            connection.start().then(function () {
                //
            }).catch(function (err) {
                return console.error(err.toString());
            });

        </script>

        <!-- script to do visualization --> 

        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>
            const labels = []
            const datasetdata = []

            const data = {
                labels: labels,
                datasets: [{
                    label: 'Viewers',
                    data: datasetdata,
                    fill: false,
                }]
            };
            const config = {
                type: 'bar',
                data,
                options: {
                    indexAxis: 'y',
                    plugins: {
                        legend: false,
                    },
                    elements:{
                        bar: {
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgb(75, 192, 192)',
                            borderWidth: 1,
                            barThickness: 15,
                            maxBarThickness: 15,
                        }
                    }
                }
            };

            // apply chart configuration:
            var context = document.getElementById('myChart');
            var myChart = new Chart(
                context,
                config
            );

            subject.subscribe((v) => console.log(`subject got pushed: ${JSON.stringify(v)}`));

            // subscribe to get the unique list of channels for which data is pushed so far:
            @* subject.pipe(
                rxjs.operators.distinct(msg => msg.channel)
            ).subscribe((msg) => {
                labels.push(msg.channel);
                myChart.update();
            }); *@

            subject.subscribe( (msg) => {
                var indexOfChannel = labels.indexOf(msg.channel);
                if(indexOfChannel === -1){
                    labels.push(msg.channel);
                    datasetdata.push(msg.viewerCount);
                } else {
                    datasetdata[indexOfChannel] = msg.viewerCount;
                }
                myChart.update();
            });


        </script>
        
    </body>
</html>


